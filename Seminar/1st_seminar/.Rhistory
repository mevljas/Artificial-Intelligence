remove.packages("dplyr")
install.packages("dplyr")
rm(list=ls())
setwd("D:\\School\\2.Letnik\\Umetna_inteligenca\\Prva_seminarska_naloga\\")
setwd("C:\\Users\\sebas\\Google Drive\\2.Letnik\\Umetna_inteligenca\\Prva_seminarska_naloga\\")
podatki <- read.table(file="podatkiSem1.txt", sep=",", header=TRUE)
podatki$Datum <- as.Date(podatki$Datum)
library(lubridate)
mesec <- month(as.POSIXlt(podatki$Datum, format="%Y-%m-%d"))
podatki <- cbind(podatki, mesec=mesec)
#letni ÄŤas
getSeason <- function(DATES) {
zima <- as.Date("2012-12-21", format = "%Y-%m-%d") # Winter Solstice
pomlad <- as.Date("2012-3-21",  format = "%Y-%m-%d") # Spring Equinox
poletje <- as.Date("2012-6-21",  format = "%Y-%m-%d") # Summer Solstice
jesen <- as.Date("2012-9-23",  format = "%Y-%m-%d") # Fall Equinox
# Convert dates from any year to 2012 dates
d <- as.Date(strftime(DATES, format="2012-%m-%d"))
ifelse (d >= zima | d < pomlad, "zima",
ifelse (d >= pomlad & d < poletje, "spomlad",
ifelse (d >= poletje & d < jesen, "poletje", "jesen")))
}
letni_casi <- getSeason(podatki$Datum)
podatki <- cbind(podatki, letni_cas=letni_casi)
#dan v tednu
library(lubridate)
dan <- weekdays(as.Date(podatki$Datum))
podatki$dan <- dan
#odstranim datum
podatki$Datum <- NULL
podatki$Postaja <- as.factor(podatki$Postaja)
podatki$letni_cas <- as.factor(podatki$letni_cas)
podatki$dan <- as.factor(podatki$dan)
sel <- sample(1:nrow(podatki), size=as.integer(nrow(podatki) * 0.7), replace=F)
learn <- podatki[sel,] #ucna mnozica
podatki$razredO3 <- NA
podatki$razredO3[podatki$O3 < 60.0] = "NIZKA"
podatki$razredO3[podatki$O3 >= 60.0 & podatki$O3 < 120.0] = "SREDNJA"
podatki$razredO3[podatki$O3 >= 120.0 & podatki$O3 < 180.0] = "VISOKA"
podatki$razredO3[podatki$O3 >= 180.0] = "EKSTREMNA"
podatki$razredO3 <- as.factor(podatki$razredO3)
# Lahko napisemo funkcijo za izracun klasifikacijske tocnosti
CA <- function(prave, napovedane)
{
t <- table(prave, napovedane)
sum(diag(t)) / sum(t)
}
# Funkcija za izracun Brierjeve mere
# az vsako dimenizjo pogleda kolko je failu
#napake kvadriramo in sestejemo
#delimo s stevilo vrstci oz. stevilom testnih primerov
#manjsa verejtnost je boljsa, brier score nam pove kolko je failu
#najslabsa verjetnost je 2, ker lfali za 1 in za 0
brier.score <- function(observedMatrix, predictedMatrix)
{
sum((observedMatrix - predictedMatrix) ^ 2) / nrow(predictedMatrix)
}
# Funkcija za izracun senzitivnosti modela  -pozitiven razred
Sensitivity <- function(observed, predicted)
{
t <- table(observed, predicted)
t[1, 1] / sum(t[1,])
}
# Funkcija za izracun specificnosti modela  -negativen razred
Specificity <- function(observed, predicted)
{
t <- table(observed, predicted)
t[2, 2] / sum(t[2,])
}
#library(dplyr)
#pri vseh odstranim O3
podatki$O3 <- NULL
# Podatke bomo nakljucno razdelili na ucno in testno mnozico v rezmerju 70:30.
#Ukaz set.seed nastavi generator nakljucnih stevil.
# Uporabimo ga takrat, ko zelimo ponovljivo sekvenco generiranih stevil.
set.seed(12345) #da vsi nasi random generatorji delajo na enak nacin -9iste nakljucne vrednosti
sel <- sample(1:nrow(podatki), size=as.integer(nrow(podatki) * 0.7), replace=F)
learn <- podatki[sel,]#ucna mnozica
test <- podatki[-sel,]#testna
# poglejmo pogostost posameznih razredov
table(learn$razredO3)
sum(test$razredO3 == "SREDNJA") / length(test$razredO3)
remove.packages("dplyr")
#remove.packages("dplyr")
install.packages("dplyr")
#remove.packages("dplyr")
#install.packages("dplyr")
library(dplyr)
podatki2 <- select(podatki,
Hitrost_vetra_max, Hitrost_vetra_mean,
Pritisk_mean,
Vlaga_mean, Vlaga_min,
Temperatura_Krvavec_max, Temperatura_Krvavec_min,
Temperatura_lokacija_max, Temperatura_lokacija_min,
mesec, razredO3)
set.seed(12345)
sel <- sample(1:nrow(podatki2), size=as.integer(nrow(podatki2) * 0.7), replace=F)
learn <- podatki2[sel,]#ucna mnozica
test <- podatki2[-sel,]#testna
library(rpart)
dt <- rpart(razredO3 ~ ., data = learn)
#plot(dt);text(dt)
# Prave vrednosti testnih primerov
observed <- test$razredO3
predicted <- predict(dt, test, type = "class")  #uporabimo ucen model
CA(observed, predicted)
Sensitivity(observed, predicted)
Specificity(observed, predicted)
# Napovedane verjetnosti pripadnosti razredom (odgovor dobimo v obliki matrike)
predMat <- predict(dt, test, type = "prob")
# Prave verjetnosti pripadnosti razredom
# (dejanski razred ima verjetnost 1.0 ostali pa 0.0)
obsMat <- model.matrix( ~ razredO3-1, test)
# Izracunajmo Brierjevo mero za napovedi nasega drevesa
brier.score(obsMat, predMat)
podatki2 <- select(podatki, Postaja, Glob_sevanje_max, Glob_sevanje_mean,
Hitrost_vetra_max, Hitrost_vetra_mean, Hitrost_vetra_min,
Sunki_vetra_max, Sunki_vetra_mean, Sunki_vetra_min,
Padavine_mean, Padavine_sum, Pritisk_max,
Pritisk_mean, Pritisk_min,
Vlaga_max, Vlaga_mean, Vlaga_min,
Temperatura_lokacija_mean, Temperatura_lokacija_min,
mesec, letni_cas, dan, PM10, razredO3)
set.seed(12345)
sel <- sample(1:nrow(podatki2), size=as.integer(nrow(podatki2) * 0.7), replace=F)
learn <- podatki2[sel,]#ucna mnozica
test <- podatki2[-sel,]#testna
library(CORElearn)
cm.nb <- CoreModel(razredO3 ~ ., data = learn, model="bayes")
observed <- test$razredO3
predicted <- predict(cm.nb, test, type="class")
CA(observed, predicted)
Sensitivity(observed, predicted)
Specificity(observed, predicted)
predMat <- predict(cm.nb, test, type = "probability")
brier.score(obsMat, predMat)
podatki2 <- select(podatki, Postaja, Glob_sevanje_max, Glob_sevanje_mean,
Hitrost_vetra_mean, Hitrost_vetra_min,
Sunki_vetra_mean,
Padavine_mean, Padavine_sum,
Pritisk_mean, Pritisk_min,
Vlaga_min,
Temperatura_Krvavec_min,
Temperatura_lokacija_max, Temperatura_lokacija_min,
mesec, letni_cas, dan, PM10, razredO3)
set.seed(12345)
sel <- sample(1:nrow(podatki2), size=as.integer(nrow(podatki2) * 0.7), replace=F)
learn <- podatki2[sel,]#ucna mnozica
test <- podatki2[-sel,]#testna
library(CORElearn)
cm.knn <- CoreModel(razredO3 ~ ., data = learn, model="knn", kInNN = 5)
predicted <- predict(cm.knn, test, type="class")
CA(observed, predicted)
Sensitivity(observed, predicted)
Specificity(observed, predicted)
#8:
predMat <- predict(cm.knn, test, type = "probability")
brier.score(obsMat, predMat)
podatki2 <- select(podatki, Postaja, Glob_sevanje_max,
Hitrost_vetra_max, Hitrost_vetra_mean,
Sunki_vetra_max, Sunki_vetra_mean, Sunki_vetra_min,
Padavine_mean, Padavine_sum, Pritisk_max,
Pritisk_mean,
Vlaga_max, Vlaga_mean, Vlaga_min,
Temperatura_Krvavec_max, Temperatura_Krvavec_mean, Temperatura_Krvavec_min,
Temperatura_lokacija_max, Temperatura_lokacija_mean, Temperatura_lokacija_min,
mesec, letni_cas, dan, PM10, razredO3)
set.seed(12345)
sel <- sample(1:nrow(podatki2), size=as.integer(nrow(podatki2) * 0.7), replace=F)
learn <- podatki2[sel,]#ucna mnozica
test <- podatki2[-sel,]#testna
library(CORElearn)
cm.rf <- CoreModel(razredO3 ~ ., data = learn, model="rf")
predicted <- predict(cm.rf, test, type="class")
CA(observed, predicted)
Sensitivity(observed, predicted)
Specificity(observed, predicted)
predMat <- predict(cm.rf, test, type = "probability")
brier.score(obsMat, predMat)
podatki2 <- select(podatki, Glob_sevanje_max,
Hitrost_vetra_max, Hitrost_vetra_mean,
Sunki_vetra_max, Sunki_vetra_mean, Sunki_vetra_min,
Padavine_mean, Padavine_sum, Pritisk_max,
Pritisk_mean, Pritisk_min,
Vlaga_max, Vlaga_mean, Vlaga_min,
Temperatura_Krvavec_max, Temperatura_Krvavec_min,
Temperatura_lokacija_max, Temperatura_lokacija_min,
mesec, dan, letni_cas, PM10, razredO3)
set.seed(12345)
sel <- sample(1:nrow(podatki2), size=as.integer(nrow(podatki2) * 0.7), replace=F)
learn <- podatki2[sel,]#ucna mnozica
test <- podatki2[-sel,]#testna
library(kernlab)
model.svm <- ksvm(razredO3 ~ ., data = learn, kernel = "rbfdot")
predicted <- predict(model.svm, test, type = "response")
CA(observed, predicted)
Sensitivity(observed, predicted)
Specificity(observed, predicted)
model.svm <- ksvm(razredO3 ~ ., data = learn, kernel = "rbfdot", prob.model = T)
predMat <- predict(model.svm, test, type = "prob")
brier.score(obsMat, predMat)
rm(list=ls())
setwd("D:\\School\\2.Letnik\\Umetna_inteligenca\\Prva_seminarska_naloga\\")
setwd("C:\\Users\\sebas\\Google Drive\\2.Letnik\\Umetna_inteligenca\\Prva_seminarska_naloga\\")
podatki <- read.table(file="podatkiSem1.txt", sep=",", header=TRUE)
podatki$Datum <- as.Date(podatki$Datum)
library(lubridate)
mesec <- month(as.POSIXlt(podatki$Datum, format="%Y-%m-%d"))
podatki <- cbind(podatki, mesec=mesec)
#letni ÄŤas
getSeason <- function(DATES) {
zima <- as.Date("2012-12-21", format = "%Y-%m-%d") # Winter Solstice
pomlad <- as.Date("2012-3-21",  format = "%Y-%m-%d") # Spring Equinox
poletje <- as.Date("2012-6-21",  format = "%Y-%m-%d") # Summer Solstice
jesen <- as.Date("2012-9-23",  format = "%Y-%m-%d") # Fall Equinox
# Convert dates from any year to 2012 dates
d <- as.Date(strftime(DATES, format="2012-%m-%d"))
ifelse (d >= zima | d < pomlad, "zima",
ifelse (d >= pomlad & d < poletje, "spomlad",
ifelse (d >= poletje & d < jesen, "poletje", "jesen")))
}
letni_casi <- getSeason(podatki$Datum)
podatki <- cbind(podatki, letni_cas=letni_casi)
#dan v tednu
library(lubridate)
dan <- weekdays(as.Date(podatki$Datum))
podatki$dan <- dan
#odstranim datum
podatki$Datum <- NULL
podatki$Postaja <- as.factor(podatki$Postaja)
podatki$letni_cas <- as.factor(podatki$letni_cas)
podatki$dan <- as.factor(podatki$dan)
sel <- sample(1:nrow(podatki), size=as.integer(nrow(podatki) * 0.7), replace=F)
learn <- podatki[sel,] #ucna mnozica
podatki$razredO3 <- NA
podatki$razredO3[podatki$O3 < 60.0] = "NIZKA"
podatki$razredO3[podatki$O3 >= 60.0 & podatki$O3 < 120.0] = "SREDNJA"
podatki$razredO3[podatki$O3 >= 120.0 & podatki$O3 < 180.0] = "VISOKA"
podatki$razredO3[podatki$O3 >= 180.0] = "EKSTREMNA"
podatki$razredO3 <- as.factor(podatki$razredO3)
# Lahko napisemo funkcijo za izracun klasifikacijske tocnosti
CA <- function(prave, napovedane)
{
t <- table(prave, napovedane)
sum(diag(t)) / sum(t)
}
# Funkcija za izracun Brierjeve mere
# az vsako dimenizjo pogleda kolko je failu
#napake kvadriramo in sestejemo
#delimo s stevilo vrstci oz. stevilom testnih primerov
#manjsa verejtnost je boljsa, brier score nam pove kolko je failu
#najslabsa verjetnost je 2, ker lfali za 1 in za 0
brier.score <- function(observedMatrix, predictedMatrix)
{
sum((observedMatrix - predictedMatrix) ^ 2) / nrow(predictedMatrix)
}
# Funkcija za izracun senzitivnosti modela  -pozitiven razred
Sensitivity <- function(observed, predicted)
{
t <- table(observed, predicted)
t[1, 1] / sum(t[1,])
}
# Funkcija za izracun specificnosti modela  -negativen razred
Specificity <- function(observed, predicted)
{
t <- table(observed, predicted)
t[2, 2] / sum(t[2,])
}
#library(dplyr)
#pri vseh odstranim O3
podatki$O3 <- NULL
# Podatke bomo nakljucno razdelili na ucno in testno mnozico v rezmerju 70:30.
#Ukaz set.seed nastavi generator nakljucnih stevil.
# Uporabimo ga takrat, ko zelimo ponovljivo sekvenco generiranih stevil.
set.seed(12345) #da vsi nasi random generatorji delajo na enak nacin -9iste nakljucne vrednosti
sel <- sample(1:nrow(podatki), size=as.integer(nrow(podatki) * 0.7), replace=F)
learn <- podatki[sel,]#ucna mnozica
test <- podatki[-sel,]#testna
# poglejmo pogostost posameznih razredov
table(learn$razredO3)
sum(test$razredO3 == "SREDNJA") / length(test$razredO3)
#remove.packages("dplyr")
#install.packages("dplyr")
library(dplyr)
podatki2 <- select(podatki,
Hitrost_vetra_max, Hitrost_vetra_mean,
Pritisk_mean,
Vlaga_mean, Vlaga_min,
Temperatura_Krvavec_max, Temperatura_Krvavec_min,
Temperatura_lokacija_max, Temperatura_lokacija_min,
mesec, razredO3)
library(rpart)
dt <- rpart(razredO3 ~ ., data = learn)
#plot(dt);text(dt)
# Prave vrednosti testnih primerov
observed <- test$razredO3
predicted <- predict(dt, test, type = "class")  #uporabimo ucen model
CA(observed, predicted)
#
# Glasovanje
#
#
modelDT <- CoreModel(razredO3 ~ ., learn, model="tree")
modelNB <- CoreModel(razredO3 ~ ., learn, model="bayes")
modelKNN <- CoreModel(razredO3 ~ ., learn, model="knn", kInNN = 5)
predDT <- predict(modelDT, test, type = "class")
caDT <- CA(test$razredO3, predDT)
caDT
